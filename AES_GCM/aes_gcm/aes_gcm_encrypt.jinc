require "aes_gcm_globals.jinc"
require "aes_gcm_common.jinc"

inline fn __store_authtag(reg u64 tag tbytes, reg u128 T)
{
    if (tbytes == 16) {
        (u128) [tag] = T;
    }
    else {
        if (tbytes == 15) {
            (u64) [tag] = #VPEXTR_64(T, 0);
            (u32) [tag + 8] = #VPEXTR_32(T, 2);
            (u16) [tag + 12] = #VPEXTR_16(T, 6);
            (u8) [tag + 14] = #VPEXTR_8(T, 14);
        }
        else {
            if (tbytes == 14) {
                (u64) [tag] = #VPEXTR_64(T, 0);
                (u32) [tag + 8] = #VPEXTR_32(T, 2);
                (u16) [tag + 12] = #VPEXTR_16(T, 6);
            }
            else {
                if (tbytes == 13) {
                    (u64) [tag] = #VPEXTR_64(T, 0);
                    (u32) [tag + 8] = #VPEXTR_32(T, 2);
                    (u8) [tag + 12] = #VPEXTR_8(T, 12);
                }
                else {
                    if (tbytes == 12) {
                        (u64) [tag] = #VPEXTR_64(T, 0);
                        (u32) [tag + 8] = #VPEXTR_32(T, 2);
                    }
                    else {
                        if (tbytes == 8) {
                            (u64) [tag] = #VPEXTR_64(T, 0);
                        }
                        else {
                            if (tbytes == 4) {
                                (u32) [tag] = #VPEXTR_32(T, 0);
                            }
                        }
                    }
                }
            }
        }
    }
}

inline fn __aes_gcm_encrypt(reg u64 plain ivec addt cipher tag nbytes abytes ibytes tbytes, stack u128[NKEYS] keys)
{
    // Declare variables
    reg u128 X, Y0, Y, H, T;
    stack u128 Y0_s;
    stack u64 plain_s, ivec_s, addt_s, cipher_s, tag_s;
    stack u64 nbytes_s, abytes_s, ibytes_s, tbytes_s;

    // Store some variables in memory
    plain_s = plain;
    ivec_s = ivec;
    addt_s = addt;
    cipher_s = cipher;
    tag_s = tag;
    nbytes_s = nbytes;
    abytes_s = abytes;
    ibytes_s = ibytes;
    tbytes_s = tbytes;

    /* --------------------------------
                H = E(K, 0¹²⁸)
       -------------------------------- */
    // Calculate value of the hash key H
    H = __init_H(keys);

    /* -----------------------------------------------------------
                       IV || 0^{31}1      if len(IV) = 96
                Y0 = {
                       GHASH(H,{},IV)  otherwise.
       ----------------------------------------------------------- */
    // Process the initialization vector generating Y0
    ivec = ivec_s;
    ibytes = ibytes_s;
    Y0 = __process_iv(ivec, ibytes, H, keys);
    Y0_s = Y0;

    /* ------------------------------------------------------------------------------
                      / 0                                  for i = 0
                Xi = {  (Xi-1 ⊕ Ai) · H                   for i = 1,...,m-1
                      \ (Xm-1 ⊕(A*m || 0^{128-v})) · H    for i = m
       ------------------------------------------------------------------------------ */
    // GHASH first step and middle step 1 (Additional Auth Data)
    addt = addt_s;
    abytes = abytes_s;
    X = #set0_128();
    X = __ghash_middlestep(addt, abytes, X, H);

    /* -------------------------------------------------------
                Yi  = incr(Yi-1) for i = 1,...,n
                Ci  = Pi ⊕ E(K,Yi) for i = 1,...,n-1
                C*n = P*n ⊕ MSBu(E(K,Yn))
       ------------------------------------------------------- */
    /* -----------------------------------------------------------------------------------
                      / (Xi-1 ⊕ Ci) · H                    for i = m+1,...,m+n-1
                Xi = {
                      \ (Xm+n-1 ⊕(C*m || 0^{128-u})) · H   for i = m+n
       ----------------------------------------------------------------------------------- */
    // Process the plaintext, generating the ciphertext and doing GHASH middle step for the ciphertext
    Y0 = Y0_s;
    plain = plain_s;
    cipher = cipher_s;
    nbytes = nbytes_s;
    X = __process_input(plain, cipher, nbytes, X, Y0, H, keys, 1);

    /* -----------------------------------------------------------------------
                Xi = (Xm+n ⊕ (len(A) || len(C))) · H   for i = m+n+1
       ----------------------------------------------------------------------- */
    // Finish GHASH computation
    nbytes = nbytes_s;
    abytes = abytes_s;
    Y = Y0_s;
    X = __ghash_laststep(nbytes, abytes, X, H, 0);  // GHASH(H,A,C)
    
    /* ---------------------------------------------------
                T = MSBt(GHASH(H,A,C) ⊕ E(K,Y₀))
       --------------------------------------------------- */
    // Generate authentication tag
    Y = __aes_rounds(Y, keys);  // E(K,Y₀)
    T = #VPXOR_128(X, Y);  // GHASH(H,A,C) ⊕ E(K,Y₀)

    tag = tag_s;
    tbytes = tbytes_s;
    __store_authtag(tag, tbytes, T);
}
